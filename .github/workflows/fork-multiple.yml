# -------------------------------------------------------------
# Required GitHub Token Permissions for this workflow:
#
# For the secret used as GH_TOKEN, ensure the following scopes:
#
# 1. Administration (Read and write)
# 2. Metadata (Read-only)
# 3. Custom properties (Read and write)
#
# If using an organization-level token, ensure the token has:
# - Custom properties permission for the organization
#
# These permissions are required to allow the workflow to create forks
# in the organization and manage repository properties.
# -------------------------------------------------------------
name: Fork Repo

on:
  workflow_dispatch:
    inputs:
      num_forks:
        description: 'Number of forks to create'
        required: true
        default: '1'
      name_prefix:
        description: 'Prefix for fork names'
        required: false
        default: 'WG'
      org:
        description: 'Target organization for forks'
        required: true
        default: 'Forrester-Wave-Demo-Q3-2025'
      repo:
        description: 'Repository org/repo to fork'
        required: false
        default: 'Forrester-Wave-Demo-Q3-2025/WebGoat'

jobs:
  fork-multiple:
    runs-on: ubuntu-latest
    steps:
      - name: Run PowerShell to clone and push to multiple repos
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.FORK_TOKEN }}
        run: |
          $numForks = [int]('${{ github.event.inputs.num_forks }}')
          $prefix = '${{ github.event.inputs.name_prefix }}'
          $org = '${{ github.event.inputs.org }}'
          $repo = '${{ github.event.inputs.repo }}'
          
          # Loop through and create each repository
          for ($i = 1; $i -le $numForks; $i++) {
            $suffix = $i.ToString('000')
            $forkName = "$prefix-$suffix"
            echo "Creating repo: $forkName"
            
            # Create a temporary directory for this iteration
            $tempDir = "temp-repo-$forkName"
            New-Item -ItemType Directory -Path $tempDir -Force
            
            # Clone only the main branch of the source repository
            echo "Cloning source repository: $repo"
            git clone --depth 1 https://github.com/$repo.git $tempDir
            
            # Navigate to the cloned directory
            Push-Location $tempDir
            
            # Create a new empty repository
            echo "Creating new repo: $org/$forkName"
            gh repo create "$org/$forkName" --internal
            
            # Add the new repo as a remote
            git remote set-url origin "https://${env:GH_TOKEN}@github.com/$org/$forkName.git"
            
            # Push to the repository
            echo "Pushing to $org/$forkName"
            git push -u origin main
            
            # Set custom property 'repo-type' to 'synthetic' - will fail if not available
            echo "Setting custom property 'repo-type' to 'synthetic' for $org/$forkName"
            gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/$org/$forkName/properties/values" -f "properties[][property_name]=repo-type" -f "properties[][value][]=synthetic"
            
            # Return to original directory and clean up
            Pop-Location
            Remove-Item -Recurse -Force $tempDir
          }
